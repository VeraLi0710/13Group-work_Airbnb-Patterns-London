---
title: 'Q7: Identifying Factors Associated with the Violations of the 90-Day Policy'
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.4
  kernelspec:
    display_name: Python (base)
    language: python
    name: base
---

```{python}
#| echo: false

# packages
import geopandas as gpd
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib.font_manager import FontProperties
from mgwr.sel_bw import Sel_BW
from scipy.stats import chi2_contingency, pearsonr, pointbiserialr
from shapely.geometry import Point
```

```{python}
#| echo: false

# load data
listing = pd.read_csv(
    "data/processed_airbnb_data.csv"
)  # inside airbnb with estimated nights
```

```{python}
#| echo: false

# check data info
print(listing.info())
```

```{python}
#| echo: false

# convert listing data to spatial data
# create geometry
geometry = [Point(xy) for xy in zip(listing["longitude"], listing["latitude"])]

# GeoDataFrame
listing_spatial = gpd.GeoDataFrame(listing, geometry=geometry, crs="EPSG:4326")

# convert CRS
listing_spatial = listing_spatial.to_crs(epsg=27700)

# info check
print(listing_spatial.head())
```

```{python}
import geopandas as gpd
import pandas as pd
import numpy as np
from shapely.geometry import Point
from mgwr.gwr import GWR
from mgwr.sel_bw import Sel_BW
import matplotlib.pyplot as plt

# 1. 读取数据文件
data_path = "data/processed_airbnb_data.csv"  # 替换为你的路径
data = pd.read_csv(data_path)
print(data.head())

# 2. 确保数据包含经纬度列
if 'longitude' not in data.columns or 'latitude' not in data.columns:
    raise ValueError("数据中必须包含 'longitude' 和 'latitude' 列！")

# 3. 创建 GeoDataFrame 并设置坐标系 (WGS84)
geometry = [Point(xy) for xy in zip(data['longitude'], data['latitude'])]
gdf = gpd.GeoDataFrame(data, geometry=geometry, crs='EPSG:4326')
print("初始坐标系:", gdf.crs)

# 4. 坐标转换到投影坐标系 (EPSG:27700)
gdf = gdf.to_crs(epsg=27700)
print("坐标系已转换为:", gdf.crs)

# 提取投影后的坐标
coords = np.column_stack((gdf.geometry.x, gdf.geometry.y))
print("前5个投影坐标点:\n", coords[:5])
```

```{python}
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from mgwr.sel_bw import Sel_BW
from mgwr.gwr import GWR
from libpysal.cg import KDTree
import matplotlib.pyplot as plt
```



```{python}
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from mgwr.gwr import GWR
import matplotlib.pyplot as plt

# 1. 数据读取和预处理
data = pd.read_csv('processed_airbnb_data.csv')

# 删除空值并选择相关列
data = data[['estimated_nights_booked', 'room_type', 'price', 'minimum_nights', 
             'calculated_host_listings_count', 'latitude', 'longitude']].dropna()

# 转换目标变量为二分类变量
data['y'] = np.where(data['estimated_nights_booked'] >= 90, 1, 0)

# 处理分类变量: room_type 使用 One-Hot 编码
encoder = OneHotEncoder(drop='first', sparse_output=False)
room_type_encoded = encoder.fit_transform(data[['room_type']])
room_type_columns = encoder.get_feature_names_out(['room_type'])
room_type_df = pd.DataFrame(room_type_encoded, columns=room_type_columns, index=data.index)

# 合并处理好的数据
X = pd.concat([data[['price', 'minimum_nights', 'calculated_host_listings_count']], room_type_df], axis=1)
y = data['y'].values.reshape(-1, 1)

# 标准化自变量
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 提取坐标
coords = np.column_stack((data['longitude'], data['latitude']))

# 2. 选取子集数据（例如 5000 行）
sample_size = 5000  # 选择子集大小
coords_sample = coords[:sample_size]
y_sample = y[:sample_size]
X_sample = X_scaled[:sample_size]

# 3. 手动设置固定带宽
fixed_bandwidth = 1000  # 手动设置带宽

# 4. 拟合 GWR 模型
print("开始拟合 GWR 模型（使用子集数据和固定带宽）...")
model = GWR(coords_sample, y_sample, X_sample, fixed_bandwidth)
results = model.fit()
print("GWR 模型拟合完成！")

# 5. 输出局部 R² 和回归系数（前5个点）
print("\n局部 R²（前5个点）:")
print(results.localR2[:5])

print("\n回归系数（前5个点）:")
print(results.params[:5])

# 6. 可视化局部 R² 分布
plt.figure(figsize=(10, 6))
plt.scatter(coords_sample[:, 0], coords_sample[:, 1], c=results.localR2, cmap='coolwarm', s=20)
plt.colorbar(label="Local R²")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.title("Spatial Distribution of Local R² (Sample Data)")
plt.show()
```

